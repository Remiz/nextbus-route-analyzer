# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2015-12-15 21:32
from __future__ import unicode_literals

import time
from collections import defaultdict
from django.db import migrations
from django.conf import settings
from nextbusstats.nextbus.api_utils import NextBus


def collect_routes_and_stops(apps, schema_editor):
    """Collecting all routes and stops for a predefined agency set in Settings"""
    Route = apps.get_model('routes', 'Route')
    Direction = apps.get_model('routes', 'Direction')
    Stop = apps.get_model('routes', 'Stop')

    nb = NextBus()
    for route_info in nb.get_route_list(settings.AGENCY_TAG):
        route_config = nb.get_route_config(settings.AGENCY_TAG, route_info['tag'])
        route_attributes = route_config['route_attributes']
        route = Route(
            tag=route_attributes['tag'],
            title=route_attributes['title'],
            color=route_attributes['color'],
            opposite_color=route_attributes['oppositeColor'],
            lat_min=route_attributes['latMin'],
            lat_max=route_attributes['latMax'],
            lon_min=route_attributes['lonMin'],
            lon_max=route_attributes['lonMax'],
        )
        route.save()
        direction_stops = defaultdict(lambda: None)
        for direction_info in route_config['directions']:
            direction = Direction(
                name=direction_info['name'],
                title=direction_info['title'],
                tag=direction_info['tag'],
                route=route,
            )
            direction.save()
            for stop in direction_info['stops']:
                direction_stops[stop] = direction.id
        for stop_info in route_config['stops']:
            if 'stopId' in stop_info:  # stopId can be absent from stop
                stop_id = stop_info['stopId']
            else:
                stop_id = None
            stop = Stop(
                tag=stop_info['tag'],
                stop_id=stop_id,
                title=stop_info['title'],
                lat=stop_info['lat'],
                lon=stop_info['lon'],
                route=route,
                direction_id=direction_stops[stop_info['tag']],
            )
            stop.save()
        print "Loading route: %s" % route.title


class Migration(migrations.Migration):

    dependencies = [
        ('routes', '0005_stop_direction'),
    ]

    operations = [
        migrations.RunPython(collect_routes_and_stops)
    ]
